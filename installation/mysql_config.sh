#!/bin/bash

# MySQL Configuration Script
# This script allows users to set their MySQL password and test the connection

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${CYAN}================================${NC}"
    echo -e "${CYAN}  MySQL Configuration Tool${NC}"
    echo -e "${CYAN}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_instruction() {
    echo -e "${BLUE}[INSTRUCTION]${NC} $1"
}

# Function to check if MySQL client is installed
check_mysql_client() {
    if ! command -v mysql &> /dev/null; then
        print_error "MySQL client is not installed"
        print_instruction "Please install MySQL first:"
        print_instruction "  macOS: brew install mysql"
        print_instruction "  Linux: sudo apt-get install mysql-client"
        print_instruction "  Windows: Download from https://dev.mysql.com/downloads/mysql/"
        exit 1
    fi
    print_success "MySQL client found"
}

# Function to test MySQL connection
test_mysql_connection() {
    local host="$1"
    local user="$2"
    local password="$3"
    
    print_status "Testing MySQL connection..."
    
    if mysql -h "$host" -u "$user" -p"$password" -e "SELECT 1;" >/dev/null 2>&1; then
        print_success "MySQL connection successful!"
        return 0
    else
        print_error "MySQL connection failed"
        return 1
    fi
}

# Function to get MySQL credentials
get_mysql_credentials() {
    print_header
    
    check_mysql_client
    
    print_instruction "Please enter your MySQL credentials:"
    echo ""
    
    # Get MySQL host
    read -p "MySQL Host (default: localhost): " mysql_host
    mysql_host=${mysql_host:-localhost}
    
    # Get MySQL user
    read -p "MySQL User (default: root): " mysql_user
    mysql_user=${mysql_user:-root}
    
    # Get MySQL password
    echo -n "MySQL Password: "
    read -s mysql_password
    echo ""
    
    # Confirm password
    echo -n "Confirm MySQL Password: "
    read -s mysql_password_confirm
    echo ""
    
    if [ "$mysql_password" != "$mysql_password_confirm" ]; then
        print_error "Passwords do not match"
        exit 1
    fi
    
    # Test the connection
    if test_mysql_connection "$mysql_host" "$mysql_user" "$mysql_password"; then
        # Save credentials to config file
        cat > installation/mysql_credentials.conf << EOF
# MySQL Credentials Configuration
# Generated by mysql_config.sh
# DO NOT commit this file to version control!

MYSQL_HOST=$mysql_host
MYSQL_USER=$mysql_user
MYSQL_PASSWORD=$mysql_password
MYSQL_DATABASE=Final
MYSQL_PORT=3306
EOF
        
        print_success "MySQL credentials saved to installation/mysql_credentials.conf"
        print_warning "Keep this file secure and do not share it!"
        
        # Update .env file if it exists
        if [ -f ".env" ]; then
            print_status "Updating .env file with new MySQL credentials..."
            sed -i.bak "s/DB_HOST=.*/DB_HOST=$mysql_host/" .env
            sed -i.bak "s/DB_USER=.*/DB_USER=$mysql_user/" .env
            sed -i.bak "s/DB_PASSWORD=.*/DB_PASSWORD=$mysql_password/" .env
            print_success ".env file updated"
        fi
        
        return 0
    else
        print_error "Failed to connect to MySQL with provided credentials"
        print_instruction "Please check your MySQL server status and credentials"
        return 1
    fi
}

# Function to load MySQL credentials from config file
load_mysql_credentials() {
    if [ -f "installation/mysql_credentials.conf" ]; then
        source installation/mysql_credentials.conf
        return 0
    else
        return 1
    fi
}

# Function to test existing configuration
test_existing_config() {
    print_header
    
    if load_mysql_credentials; then
        print_status "Testing existing MySQL configuration..."
        
        if test_mysql_connection "$MYSQL_HOST" "$MYSQL_USER" "$MYSQL_PASSWORD"; then
            print_success "Existing configuration is working!"
            print_status "MySQL Host: $MYSQL_HOST"
            print_status "MySQL User: $MYSQL_USER"
            print_status "MySQL Database: $MYSQL_DATABASE"
            return 0
        else
            print_error "Existing configuration failed"
            return 1
        fi
    else
        print_warning "No existing configuration found"
        return 1
    fi
}

# Function to show help
show_help() {
    print_header
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  setup     - Set up MySQL credentials (interactive)"
    echo "  test      - Test existing MySQL configuration"
    echo "  help      - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 setup  - Configure MySQL credentials"
    echo "  $0 test   - Test current configuration"
    echo ""
    echo "The script will:"
    echo "  • Test MySQL connection"
    echo "  • Save credentials to installation/mysql_credentials.conf"
    echo "  • Update .env file if it exists"
    echo "  • Ensure secure credential storage"
}

# Main script logic
case "${1:-setup}" in
    "setup")
        get_mysql_credentials
        ;;
    "test")
        test_existing_config
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac 